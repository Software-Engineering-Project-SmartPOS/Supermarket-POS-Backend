extend type Query {
    GetSale(id: ID!): Sales
    GetAllSales: [Sales]
    GetSalesItem(id: ID!): SalesItem
    GetAllSalesItems: [SalesItem]

    GetRefundById(id: ID!): Refund
    GetAllRefunds: [Refund!]
    GetRefundItem(id: ID!): RefundItem


}

extend type Mutation {
    CreateSales(salesInput: SaleInput): Sales
#    UpdateSales(input: SaleInput): Sales

    CreateRefund(refundDetails: RefundInput) : Refund

}

type Refund {
    id: Int!
    sales: Sales!
    total: Float!
    refundItems: [RefundItem]!
}

input RefundInput {
    salesId: ID!
    total: Float!
    refundItemList: RefundItemInput
}

type RefundItem {
    id: Int!
    refund: Refund!
    item: Item!
    quantity: Int!
    unitPrice: Float!
}

input RefundItemInput {
    salesItemId: ID!
    quantity: Float!
}


type Sales {
    id: ID!
    barcodeNo: String
    customer: Customer
    time: String
    total: Float
    discount: Float
    loyaltyPoints: Int
    paymentType: String
    salesItemList: [SalesItem]
}

type SalesItem {
    id: ID # used when updating the data
    sales: Sales
    stockLevel: StockLevel
    quantity: Float
    unitPrice: Float
    subtotal: Float
    discountGiven : Float
    total : Float

}


input SaleInput {
    id: ID # used when updating the data
    barcodeNo: String # used when updating / returning
    customerId: ID
    salesItemsInput : [SalesItemInput]
    total: Float
#    discount: Float
#    loyaltyPoints: Int
    paymentType: PaymentType
}

input SalesItemInput {
    saleId: ID # used when updating
    stockLevelId: ID
    quantity: Float
}
enum PaymentType{
    CASH
    ONLINE
    DEBIT_CARD,
    CREDIT_CARD
    GIFT_CARD
}