extend type Mutation {
    CreateItem(itemInput: ItemInput!): Item
    UpdateItem(itemDetail: ItemInput): Item

    AddSupplier(supplierInput: SupplierInput) : Supplier
    UpdateSupplier(supplierDetail: SupplierInput): Supplier

    CreateBrand(brandInput: BrandInput!): Brand
    UpdateBrand(brandInput : BrandInput): Brand

    CreateCategory(categoryInput: CategoryInput): Category!
    UpdateCategory(categoryInput: CategoryInput): Category!

    CreateItemSupply(itemSupplyInput: ItemSupplyInput!): ItemSupply
    UpdateItemSupply(itemSupplyInput: ItemSupplyInput!): ItemSupply
    DeleteItemSupply(id: ID!): Boolean

    CreatePurchaseOrder(purchaseOrderInput: PurchaseOrderInput!): PurchaseOrder
    UpdatePurchaseOrder(id: ID!, input: PurchaseOrderInput!): PurchaseOrder
    DeletePurchaseOrder(id: ID!): Boolean

    PurchaseOrderItemArrival(arrivalDetails: PurchaseOrderItemArrivalInput) : PurchaseOrderItem



}
input PurchaseOrderItemArrivalInput{
    purchaseOrderItemId: ID!
    receivedQuantity: Float
}


extend type Query{
    GetItemById(id: ID): Item
    GetItemByBarcode(barcode: String): Item
    GetItemByItemCode(itemCode: String): Item

    GetSupplierById(id:ID!) : Supplier
    GetSupplierByEmail(name: String) : Supplier
    GetAllSuppliers : [Supplier]

    GetBrandById(id: ID!) : Brand
    GetBrandByName(name: String): Brand
    GetAllBrands : [Brand]

    GetCategoryById(id: ID) : Category
    GetCategoryByName(name: String): Category
    GetAllCategories : [Category]!

    GetActiveItemSupplyById(id: ID!): ItemSupply
    GetActiveItemSuppliesBySupplierId(supplierId: ID!): [ItemSupply]
    GetActiveItemSuppliesByItemId(itemId: ID!): [ItemSupply]
    GetActiveItemSuppliesByBranchId(branchId: ID!): [ItemSupply]

#    all these give only the data related to the callers branch
    AllPurchaseOrders: [PurchaseOrder!]!
    PurchaseOrderById(id: ID!): PurchaseOrder
    AllPurchaseOrdersBySupplierId(supplierId: ID!) :[PurchaseOrder!]
    AllPurchaseOrdersByStatus(status: PurchaseOrderStatus): [PurchaseOrderItem]



}


type PurchaseOrder {
    id: ID!
    supplier: Supplier!
    orderedDate: String!
    expectedDate: String!
    createdBy: Employee!
    description: String!
    branch: Branch!
    purchaseCost: Float!
    purchaseOrderItemList: [PurchaseOrderItem!]
    orderStatus: PurchaseOrderStatus! # Now using the enum type
}


type PurchaseOrderItem {
    id: ID!
    purchaseOrder: PurchaseOrder!
    item: Item!
    itemSupply: ItemSupply!
    quantity: Float!
    purchaseItemUnitCost: Float!
    totalCost: Float!
    receivedQuantity: Float!
    purchaseOrderItemStatus: PurchaseOrderStatus
#    orderArrivals: [StockArrival!]
}
input PurchaseOrderInput {
    id: ID
    SupplierId: ID
    description: String
    expectedDate: String
    purchaseCost: Float
    purchaseOrderItemList: [PurchaseOrderItemInput]!
}

input PurchaseOrderItemInput {
    id: ID
    purchaseOrderId: ID
    itemId: ID
    itemSupplyId: ID
    quantity: Float
    purchaseItemUnitCost: Float
    totalCost: Float
    receivedQuantity: Float
}


enum PurchaseOrderStatus {
    CREATE
    CONFIRMED
    HALF_RECEIVED
    COMPLETED
    CANCELLED
}

type ItemSupply {
    id: ID!
    supplier: Supplier!
    item: Item!
    createdDate: String!
    modifiedDate: String
    createdBy: Employee!
    updatedEmployee: Employee
    branch: Branch!
    unitCost: Float!
    active: Boolean!
}


input ItemSupplyInput {
    id: Int # used when updating
    supplierId: Int
    itemId: Int
    #    branchId: Int! # branch id should be captured by the token //owner cant create this then
    unitCost: Float
    active: Boolean
}

input ItemInput {
    id: Int # Used when updating
    itemCode: String!
    name: String!
    barcodeNo: String!
    description: String!
    categoryId: Int!
    brandId: Int!
    unitOfMeasure: UnitOfMeasure!
    active: Boolean!
    reorderLevel: Int!
    returnable: Boolean!
}
type Item {
    id: Int!
    itemCode: String!
    name: String!
    barcodeNo: String!
    description: String!
    category: Category!
    brand: Brand!
    unitOfMeasure: UnitOfMeasure!
    createdAt: String!
    updatedAt: String
    active: Boolean!
    reorderLevel: Int!
    returnable: Boolean!
}

enum UnitOfMeasure {
    KILOGRAM
    GRAMS
    LITERS
    MILLILITERS
    METERS
    MILLIMETERS
    COUNT
}

input SupplierInput {
    id: Int # Used when updating supplier details
    name: String
    landPhone: String
    mobilePhone: String
    email: String
    addressId: Int # Used when updating supplier details
    houseNumber: String
    street: String
    city: String
    district: String
    postalCode: String
    active: Boolean
    branchId: Int
}


type Supplier {
    id: Int
    name: String
    landPhone: String
    mobilePhone: String
    email: String
    address: Address
    branchId: Int
    createdBy: Employee
    updatedEmployee: Employee
    createdAt: String
    updatedAt: String
    active: Boolean


}


input CategoryInput {
    id: ID
    name: String
    description: String
}

type Category {
    id: ID!
    name: String!
    description: String
    createAt: String
    updateAt: String
    updatedEmployee: Employee!
    updatedDate: String
    #itemList: [Item]
}


input BrandInput {
    id: ID   # used when updating the brand
    name: String!
    description: String
}

type Brand {
    id: ID!
    name: String!
    description: String
    updateAt : String
    createAt : String
}


