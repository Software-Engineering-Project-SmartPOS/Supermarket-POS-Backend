extend type Query {
  validateNewCustomerDetail(newCustomerDetail: CustomerInput): CustomerValidationReport
  customerById(customerId :ID):Customer
  allCustomer: [Customer]


  #loyalty Program
  getAllLoyaltyPrograms: [LoyaltyProgram]!
  getLoyaltyProgramById(loyaltyProgramId: ID!): LoyaltyProgram


}

extend type Mutation {
  addCustomer(customerInput: CustomerInput): Customer
  updateCustomer(customerUpdateInput : CustomerInput) : Customer


  #creat a new loyalty program
  createLoyaltyProgram(newProgramInput: LoyaltyProgramInput!): LoyaltyProgram!
  updateLoyaltyProgram(updateDetail: LoyaltyProgramInput!) :LoyaltyProgram!
}

type CustomerValidationReport {
  isTelephoneOkay: Boolean
  isEmailOkay: Boolean
}

input CustomerInput {
  id : ID  # this is used when updating an customer
  name: String
  telephone: String
  email: String
  customerAddress: CustomerAddressInput #customer address input
  customerType : CustomerType
  # customer type is not needed when adding a new customer
  password : String
}


type Customer {
  id: ID
  name: String
  telephone: String
  email: String
  customerAddress: CustomerAddress
    customerType: CustomerType
  loyaltyId : String
  createdDate: String
  firstVisited: String
  lastVisited :String
}

enum CustomerType {
  GRADE_A
  GRADE_B
  GRADE_C
}


input CustomerAddressInput{
  id : ID # used when updating the address
  address : String
  city : String
  district : String
  postalCode: String
}

type CustomerAddress{
  id : String
  address : String
  city : String
  district : String
  postalCode: String
}


type LoyaltyProgram {
  id: ID!
  loyaltyProgramName: String!
  description: String
  pointsThreshold: Int!
  discountPercentage: Float!
}
input LoyaltyProgramInput {
  id :ID  #used when updating
  loyaltyProgramName: String!
  description: String
  pointsThreshold: Int!
  discountPercentage: Float!
}
