extend type Query {
  allEmployees: [Employee]
  allAddress: [Address]
  addressById(id: ID!): Address
  allEmployeesByAddressId(addressId: ID!): [Employee]
  isValidateEmployee(employeeInput: EmployeeInput): EmployeeValidationReport #this is to validate the employee when creating a new employee

  salaryTypeById(id : ID): SalaryType


  #to login the user and give the jwt token
  loginEmployee(credentials : EmployeeInput) : Employee
}
extend type Mutation {
  #    here the input for the mutations must be defined in the graphql schema
  #    all the inputs must be in json
  #    in the request body, input data should be in json
  #    those inputs names must be same as in the input type
  #    but no order is needed
  #    when mapping the mutation,
  #       that function
  # addAddress(addressInput: AddressInput): Address
  #add new Salary Type


  AddSalaryType(inputSalaryTypeDetails: SalaryTypeInput): SalaryType

  AddEmployee(employeeInput: EmployeeInput): Employee
}

input LoginDetails{
  userName: String
  password: String
}

type EmployeeValidationReport {
  isNameOkay: Boolean
  isNumberOkay: Boolean
  isEmailOkay: Boolean
}

input AddressInput {
  streetName: String!
  houseNumber: String!
  zipcode: String!
}

input EmployeeInput {
  title: Title
  firstName: String
  middleName: String
  lastName: String
  email: String
  addressId: Int # Updated field name and type
  houseNumber: String
  street: String
  city: String
  district: String
  postalCode: String
  phoneNumber: String # Added phoneNumber field
  jobRole: JobRole
  salaryTypeId: Int
}

type Employee {
  id: ID!
  title: Title!
  firstName: String!
  middleName: String
  lastName: String!
  branch: Branch
  email: String!
  address: Address
  number: String!
  jobRole: JobRole!
  salaryType: SalaryType
  active: Boolean!
}

type Branch {
  id: ID
  name: String
  telephone: String
}

type Address {
  id: ID
  houseNumber: String
  street: String
  city: String
  district: String
  postalCode: String
}

type SalaryType {
  id: ID!
  basicSalary: Float
  halfDaySalary: Float
  overTimeSalary: Float
  bonus: Float
  employees: [Employee]
}

input SalaryTypeInput {
  basicSalary: Float
  halfDaySalary: Float
  overTimeSalary: Float
  bonus: Float
}

enum Title {
  MR
  MRS
  MISS
}
enum JobRole {
  CASHIER
  OWNER
  MANAGER
  STORE_MANAGER
  SALES_ASSISTANT
}
