extend type Query {
  allEmployees: [Employee]
  allAddress: [Address]
  addressById(id: ID!): Address
  allEmployeesByAddressId(addressId: ID!): [Employee]
  isValidateEmployee(employeeInput: EmployeeInput): EmployeeValidationReport #this is to validate the employee when creating a new employee

  salaryTypeById(id : ID): SalaryType
  allSalaryTypes: [SalaryType]

  GetWorkingHours( workingHoursRequest : WorkingHoursRequest) : String
}
extend type Mutation {
  #    here the input for the mutations must be defined in the graphql schema
  #    all the inputs must be in json
  #    in the request body, input data should be in json
  #    those inputs names must be same as in the input type
  #    but no order is needed
  #    when mapping the mutation,
  #       that function
  # addAddress(addressInput: AddressInput): Address
  #add new Salary Type



  AddSalaryType(inputSalaryTypeDetails: SalaryTypeInput): SalaryType
  AddEmployee(employeeInput: EmployeeInput): EmployeeOutput
  UpdateEmployee(employeeInput :EmployeeInput): Employee
  InActivateEmployee(employeeInput: EmployeeInput): String


  UpdateSalryType(salaryTypeDetails: SalaryTypeInput) : SalaryType
  DeleteSalaryType( id: ID! ) : String

  MarKEmployeeAttendance(employeeAttendanceDetails :EmployeeAttendanceDetails): Boolean

}
union EmployeeOutput = Employee | FailedPayLoad

type FailedPayLoad{
  errorMessage: String!
}

input WorkingHoursRequest{
  employeeId: ID
  from : String #here is the from date
  to: String # here is the to date
}


input  EmployeeAttendanceDetails{
  employeeId: ID
  timeIn : String
  timeOut: String
  timeInDate: String
  timeOutDate: String
}
input LoginDetails{
  userName: String
  password: String
}

type EmployeeValidationReport {
  isNameOkay: Boolean
  isNumberOkay: Boolean
  isEmailOkay: Boolean
}

input AddressInput {
  streetName: String!
  houseNumber: String!
  zipcode: String!
}

input EmployeeInput {
  id: ID
  title: Title
  firstName: String
  middleName: String
  lastName: String
  email: String
  addressId: Int # Updated field name and type
  houseNumber: String
  street: String
  city: String
  district: String
  postalCode: String
  phoneNumber: String # Added phoneNumber field
  jobRole: JobRole
  salaryTypeId: Int
  password: String
  branchId : ID
}

type Employee {
  id: ID!
  title: Title!
  firstName: String!
  middleName: String
  lastName: String!
  branch: Branch
  email: String!
  address: Address
  number: String!
  jobRole: JobRole!
  salaryType: SalaryType
  active: Boolean!
  createdAt : String
  updatedAt: String
}


type Address {
  id: ID
  houseNumber: String
  street: String
  city: String
  district: String
  postalCode: String
}

type SalaryType {
  id: ID!
  basicSalary: Float
  halfDaySalary: Float
  overTimeSalary: Float
  bonus: Float
  employees: [Employee]
}

input SalaryTypeInput {
  id: ID # used when updating
  basicSalary: Float
  halfDaySalary: Float
  overTimeSalary: Float
  bonus: Float
}

enum Title {
  MR
  MRS
  MISS
}
enum JobRole {
  CASHIER,
  OWNER,
  MANAGER,
  STORE_MANAGER,
  SALES_ASSISTANT,
  ADMIN
}
